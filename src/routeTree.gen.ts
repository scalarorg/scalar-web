/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ProtocolsIndexImport } from './routes/protocols/index'
import { Route as ExploreIndexImport } from './routes/explore/index'
import { Route as ProtocolsMeImport } from './routes/protocols/me'
import { Route as ProtocolsSlugImport } from './routes/protocols/$slug'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtocolsIndexRoute = ProtocolsIndexImport.update({
  id: '/protocols/',
  path: '/protocols/',
  getParentRoute: () => rootRoute,
} as any)

const ExploreIndexRoute = ExploreIndexImport.update({
  id: '/explore/',
  path: '/explore/',
  getParentRoute: () => rootRoute,
} as any)

const ProtocolsMeRoute = ProtocolsMeImport.update({
  id: '/protocols/me',
  path: '/protocols/me',
  getParentRoute: () => rootRoute,
} as any)

const ProtocolsSlugRoute = ProtocolsSlugImport.update({
  id: '/protocols/$slug',
  path: '/protocols/$slug',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/protocols/$slug': {
      id: '/protocols/$slug'
      path: '/protocols/$slug'
      fullPath: '/protocols/$slug'
      preLoaderRoute: typeof ProtocolsSlugImport
      parentRoute: typeof rootRoute
    }
    '/protocols/me': {
      id: '/protocols/me'
      path: '/protocols/me'
      fullPath: '/protocols/me'
      preLoaderRoute: typeof ProtocolsMeImport
      parentRoute: typeof rootRoute
    }
    '/explore/': {
      id: '/explore/'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreIndexImport
      parentRoute: typeof rootRoute
    }
    '/protocols/': {
      id: '/protocols/'
      path: '/protocols'
      fullPath: '/protocols'
      preLoaderRoute: typeof ProtocolsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/protocols/$slug': typeof ProtocolsSlugRoute
  '/protocols/me': typeof ProtocolsMeRoute
  '/explore': typeof ExploreIndexRoute
  '/protocols': typeof ProtocolsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/protocols/$slug': typeof ProtocolsSlugRoute
  '/protocols/me': typeof ProtocolsMeRoute
  '/explore': typeof ExploreIndexRoute
  '/protocols': typeof ProtocolsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/protocols/$slug': typeof ProtocolsSlugRoute
  '/protocols/me': typeof ProtocolsMeRoute
  '/explore/': typeof ExploreIndexRoute
  '/protocols/': typeof ProtocolsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/protocols/$slug'
    | '/protocols/me'
    | '/explore'
    | '/protocols'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/protocols/$slug' | '/protocols/me' | '/explore' | '/protocols'
  id:
    | '__root__'
    | '/'
    | '/protocols/$slug'
    | '/protocols/me'
    | '/explore/'
    | '/protocols/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtocolsSlugRoute: typeof ProtocolsSlugRoute
  ProtocolsMeRoute: typeof ProtocolsMeRoute
  ExploreIndexRoute: typeof ExploreIndexRoute
  ProtocolsIndexRoute: typeof ProtocolsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtocolsSlugRoute: ProtocolsSlugRoute,
  ProtocolsMeRoute: ProtocolsMeRoute,
  ExploreIndexRoute: ExploreIndexRoute,
  ProtocolsIndexRoute: ProtocolsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/protocols/$slug",
        "/protocols/me",
        "/explore/",
        "/protocols/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/protocols/$slug": {
      "filePath": "protocols/$slug.tsx"
    },
    "/protocols/me": {
      "filePath": "protocols/me.tsx"
    },
    "/explore/": {
      "filePath": "explore/index.tsx"
    },
    "/protocols/": {
      "filePath": "protocols/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
